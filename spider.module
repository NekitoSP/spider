<?php
// $Id$
/**
* @file
* The Spider searches for IT jobs, adds them to the database, and shows them on the site with neat statistic information for further analization.
* @see http://ugatu.ac.ru
*/

include("parser.php");

//Implementation of hook_init()
function spider_init() {
  drupal_add_css(drupal_get_path('module', 'spider') .'/spider.css');
  drupal_add_js(drupal_get_path('module', 'spider') .'/spider.js');
}

/**
 * Settings page for module
 *
 */
function spider_admin() {
  $form = array();

  $form['spider_maxdisp'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of links in widget'),
    '#default_value' => variable_get('spider_maxdisp', 3),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t("The maximum number of links to display in the block."),
    '#required' => TRUE,
  );
  
  $form['spider_maxdisp_page'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of links on the jobs page'),
    '#default_value' => variable_get('spider_maxdisp_page', 10),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t("The maximum number of links to display on the module page."),
    '#required' => TRUE,
  );
    
  $form['spider_update_button'] = array(
    '#type' => 'submit',
    '#submit' => array('spider_update'),
    '#value' => t('Update'),
  );


  return system_settings_form($form);
}

/**
 * Input values validation
 */
function spider_admin_validate($form, &$form_state) {
	// for widget 
	$maxdisp = $form_state['values']['spider_maxdisp'];
	if (!is_numeric($maxdisp)) {
		form_set_error('spider_maxdisp', t('You must enter an integer for the maximum number of links.'));
	}
	else if ($maxdisp <= 0) {
    	form_set_error('spider_maxdisp', t('Maximum number of links must be positive.'));
    }
    //for page
    $maxdisp_page = $form_state['values']['spider_maxdisp_page'];
	if (!is_numeric($maxdisp_page)) {
		form_set_error('spider_maxdisp_page', t('You must enter an integer for the maximum number of links.'));
	}
	else if ($maxdisp_page <= 0) {
    	form_set_error('spider_maxdisp_page', t('Maximum number of links must be positive.'));
    }
}

/**
 * Telling Drupal about our new functions
 */
function spider_menu() {
  $items = array();
  // Settings
  $items['admin/settings/spider'] = array(
    'title' => t("Spider settings"),
    'description' => t("Spider settings page"),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spider_admin'),
    'access arguments' => array('administer spider settings'),
    'type' => MENU_NORMAL_ITEM,
   );
   // Page with a list of all jobs
   $items['jobs'] = array(
    'title' => t("All Jobs"),
    'page callback' => 'spider_all',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  // Page with search results
   $items['jobs/search'] = array(
    'title' => t("Job Search"),
    'page callback' => 'spider_search',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  // Company Page
   $items['jobs/company'] = array(
    'title' => t("Company Page"),
    'page callback' => 'spider_company',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

function spider_block($op='list', $delta=0, $edit=array()) {
	switch ($op) {
	
		case 'list':
			$blocks[0]['info'] = t('IT Jobs');
			break;
			
		case 'view':
			// Generate content for blocks from this module
			$block_content = "";
			
			//Get today's date
			$today = getdate();
			
			//Get timestamp from one week ago
			$start_time = mktime(0,0,0, $today["mon"], ($today["mday"] -7), $today["year"]);
        
			//Limit timespan to one day
			$end_time = $start_time + 86400; //60*60*24 = seconds/day
			
			//Get max limit
			$limitnum = variable_get("spider_maxdisp", 3);
			
			//Get nodes in range
			$query = "SELECT name, id FROM {spider_joblist} ORDER BY updated DESC";
			$query_result = db_query_range($query, $start_time, $end_time, 0, $limitnum);
			
			//Set Block content
			while ($items = db_fetch_object($query_result)) {
			    $block_content .= '<p class="spider-widget">' . l($items->name, "http://hh.ru/vacancy/" . $items->id);
			    $block_content .= "</p>";
			}
			
			// Add a more link to our page that displays all the links 
			$options = array( "attributes" => array("title" => t("More jobs") ) );
			$link = l( t("More →"), "jobs", $options );
			$block_content .= "<div class=\"more-link\">" . $link . "</div>";
			
			//Setup the block        
			$blocks["subject"] = t("Jobs");
			
			//Check that content isn't empty
			if ($block_content == "") {
			    $block_content = t("Sorry No Content");            
			}
			        
			$blocks["content"] = $block_content;
			break;
	}
	return $blocks;
}


/**
 * Show a list of all jobs on a single page
 */
function spider_all() {
  
	// Search field
	$search_str = t("Type something and press Enter...");
	$page_content .= '<form method="post" id="TEST"><input type="text" id="command" tabindex="1" placeholder="' . $search_str . '" ></form>';
	
  	
  	// Creating a query
	$query = "SELECT name, jobdescription, wagefrom, wageto, wagecurrency, companyid, id FROM {spider_joblist} ORDER BY updated DESC";
  	
  	
  	// Start All Jobs page
  	$page_content .= '<div id="spider-all">';
  	$limit = variable_get("spider_maxdisp_page", 5);
  	$queryResult = pager_query($query, $limit);
  	
  	// Iterate through job items
  	while ($items = db_fetch_object($queryResult)) {
  	  	//Convert epoch linux time
  		$dt = new DateTime($items->updated);
  		//Create wage string
  		if ($items->wagefrom == 0 and $items->wageto == 0)
  		  	$wage = t("Salary is negotiable");
  		else if ($items->wagefrom == 0 and $items->wageto != 0)
  		  	$wage = t("From $items->wageto");
  		else if ($items->wagefrom != 0 and $items->wageto == 0)
  		  	$wage = t("Up to $items->wagefrom");
  		else
  		  	$wage = t("From $items->wagefrom up to $items->wageto");
  		  	
  		// Get currency
  		if ($items->wagecurrency != "N/A")
  			$wage .= ' ' . $items->wagecurrency;
  		  	
  		// Get Company for the Job Item
  		$query_company = "SELECT id, name FROM {spider_companies} WHERE id LIKE '%$items->companyid%'";
  		$query_company_res = db_query($query_company);
  		$company = db_fetch_object($query_company_res);

  		// Adding a Job Item to page content
  		$page_content .= 
  		  '<div class="spider-item">
			<div class="spider-item-title">' . l($items->name, "http://hh.ru/vacancy/" . $items->id) . '</div>
  		  	<div class="spider-item-date">' . $dt->format('Y-m-d H:i:s') . '</div> - 
  		  	<div class="spider-item-wage">' . $wage . '</div> - 
  		  	<div class="spider-item-company">' . l($company->name, 'jobs/company/' . $company->id) . '</div>
  		  	<div class="spider-item-description">' . $items->jobdescription . '</div>
  		  </div>';
  	}
  	
  	$page_content .= "</div>"; // spider-all end
  	
  	// Pagination
  	$page_content .= theme('pager', NULL, 1);
  	
  	return $page_content;
}


/**
 * Show a list of all jobs matching search request
 */ 
function spider_search($input="") {
	
	// If input is empty, return a list of all jobs
	if(!isset($input))
		return spider_all();

	
	// Parsing input string: removing dashes and splitting words out
	$keywords = explode("-", $input);

	// Creating a query with the first keyword from keywords array
	$query = "SELECT name, jobdescription, id FROM {spider_joblist} WHERE name LIKE '%$keywords[0]%' OR jobdescription LIKE '%$keywords[0]%'";
	// Running through other keywords to build the query
	for ($i=1; $i<count($keywords); $i++)
		$query .= " OR name LIKE '%$keywords[$i]%' OR jobdescription LIKE '%$keywords[$i]%'";
	// Closing the query
	$query .= " ORDER BY updated DESC";
	
	
	// Start All Jobs page
	$page_content .= '<div id="spider-all">';
	$queryResult = pager_query($query, 5);
	
	// Iterate through job items
	while ($items = db_fetch_object($queryResult)) {
	  	// Convert epoch linux time
		$dt = new DateTime("$items->updated");
		// Create wage string
		if ($items->wagefrom == 0 and $items->wageto == 0)
		  	$wage = t("Salary is negotiable");
		else if ($items->wagefrom == 0 and $items->wageto != 0)
		  	$wage = t("From $items->wageto");
		else if ($items->wagefrom != 0 and $items->wageto == 0)
		  	$wage = t("Up to $items->wagefrom");
		else
		  	$wage = t("From $items->wagefrom up to $items->wageto");
		  	
		// Get currency
  		if ($items->wagecurrency != "N/A")
  			$wage .= ' ' . $items->wagecurrency;
		
		// Adding a Job Item to page content
		$page_content .= 
		  '<div class="spider-item">
			<div class="spider-item-title">' . l($items->name, "http://hh.ru/vacancy/" . $items->id) . '</div>
		  	<div class="spider-item-date">' . $dt->format('Y-m-d H:i:s') . '</div> - 
		  	<div class="spider-item-wage">' . $wage . '</div>
		  	<div class="spider-item-description">' . $items->jobdescription . '</div>
		  </div>';
	}
	
	// If no jobs found
	$page_content .= t("Sorry, no jobs found.");
	
	$page_content .= "</div>"; // spider-all end
	
	// Pagination
	$page_content .= theme('pager', NULL, 1);
	
	return $page_content;
}


/**
 * Show a list of all jobs matching search request
 */ 
function spider_company($input="") {
	
	// Parsing input string: removing dashes and splitting words out
	$keywords = explode("-", $input);

	// Creating a query with the first keyword from keywords array
	$query = "SELECT id, name, site, logo, about FROM {spider_companies} WHERE id LIKE '%$keywords[0]%'";
	// Running through other keywords to build the query
	for ($i=1; $i<count($keywords); $i++)
		$query .= " OR name LIKE '%$keywords[$i]%'";
	
	// Start All Jobs page

	$queryResult = pager_query($query, 1);
	
	// Create company representation
	$company = db_fetch_object($queryResult); 
	  	
	// Adding a company to page content
	$page_content .= 
	  '<div class="spider-company">
	    <div class="spider-company-title"><h2>' . l($company->name, $company->site) . '</h2></div>
	    <div class="spider-company-logo"><img src="' . $company->logo . '"></div>
	  	<div class="spider-company-description">' . $company->about . '</div>
	  </div>';
	
	
	$page_content .= '<h2 class="spider-jobs-list" >' . t("Latest Jobs") . '</h2>';
	// Creating a query for all the jobs at this company
	$queryForJobs = "SELECT name, jobdescription, companyid, updated, wagecurrency, wagefrom, wageto FROM {spider_joblist} WHERE companyid LIKE '%$company->id%'";
	
	$queryForJobsResult = pager_query($queryForJobs, 5);
	
	// Iterate through job items
	while ($items = db_fetch_object($queryForJobsResult)) {
	  	// Convert epoch linux time
		$dt = new DateTime("$items->updated");
		// Create wage string
		if ($items->wagefrom == 0 and $items->wageto == 0)
		  	$wage = t("Salary is negotiable");
		else if ($items->wagefrom == 0 and $items->wageto != 0)
		  	$wage = t("From $items->wageto");
		else if ($items->wagefrom != 0 and $items->wageto == 0)
		  	$wage = t("Up to $items->wagefrom");
		else
		  	$wage = t("From $items->wagefrom up to $items->wageto");
		
		// Get currency
  		if ($items->wagecurrency != "N/A")
  			$wage .= ' ' . $items->wagecurrency;
		
		// Adding a Job Item to page content
		$page_content .= 
		  '<div class="spider-item">
			<div class="spider-item-title">' . l($items->name, "http://hh.ru/vacancy/" . $items->id) . '</div>
		  	<div class="spider-item-date">' . $dt->format('Y-m-d H:i:s') . '</div> - 
		  	<div class="spider-item-wage">' . $wage . '</div>
		  	<div class="spider-item-description">' . $items->jobdescription . '</div>
		  </div>';
	}
	
	
	// Pagination
	$page_content .= theme('pager', NULL, 1);
	
	return $page_content;

}


/**
 * Implementing cron
 */
function spider_cron(){
/*
	//spider_update_timeout - глобальная переменная, хранит время до следующего апдейта в секундах
	//устанавливается в админке через variable_set('spider_update_timeout',$value);
	//$timeToUpdate = variable_get('spider_update_timeout',900);
	//15 min = 900 sec, но пока её нет - оставим 900 секунд (15 минут)
	$timeToUpdate = 900;

	$canCheck = (variable_get('spider_last_update',0) + $timeToUpdate) < time();
	if ($canCheck){
		//ВРЕМЯ ОБНОВЛЯТЬСЯ!
		//здесь нужно вытащить из БД все парсеры
		//затем создать их в зависимости от типа
		$query = "SELECT spiderid, spiderparams FROM {spider_active_spiders}";
		$queryResult = db_query($query);
		while ($parser = db_fetch_object($queryResult)){
			create_and_parse($parser->spiderid,$parser->spiderparams);
		}
	}
	*/
}

/**
 * Implementing update
 */
function spider_update(){
	$params = '{"region" : 1347, "field" : 1}';
	$parser = new HHParser(json_decode($params));
	$parser->parse();
}

/**
 * function for parse
 */
function create_and_parse($parsername='',$params=''){
	switch($parsername){
		case "hhunt"://head hunter parser
			$parser = HHParser(json_decode($params));
			break;
		default:

			break;
	}

	if(isset($parser)){
		$parser->parse();
	}
}